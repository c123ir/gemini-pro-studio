// backend/prisma/schema.prisma
// Prisma Schema Definition for Gemini Pro Studio
// Path: backend/prisma/schema.prisma

generator client {
  provider = "@prisma/client"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ===========================
// User Management
// ===========================

model User {
  id       Int    @id @default(autoincrement())
  uuid     String @unique @default(uuid())
  email    String @unique
  username String? @unique
  
  // Authentication
  passwordHash String @map("password_hash")
  emailVerified Boolean @default(false) @map("email_verified")
  isActive Boolean @default(true) @map("is_active")
  isPremium Boolean @default(false) @map("is_premium")
  
  // Profile
  firstName String? @map("first_name")
  lastName String? @map("last_name")
  avatarUrl String? @map("avatar_url")
  phone String?
  
  // Settings
  theme Theme @default(AUTO)
  language String @default("fa")
  timezone String @default("Asia/Tehran")
  
  // API Usage
  apiUsageLimit Int @default(100) @map("api_usage_limit")
  apiUsageCount Int @default(0) @map("api_usage_count")
  premiumExpiresAt DateTime? @map("premium_expires_at")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  lastLogin DateTime? @map("last_login")
  
  // Relations
  apiKeys ApiKey[]
  conversations Conversation[]
  messages Message[]
  files File[]
  tags Tag[]
  usageStats UsageStats[]
  settings Setting[]
  templates Template[]
  sessions Session[]
  activityLogs ActivityLog[]
  
  @@map("users")
  @@index([email])
  @@index([username])
  @@index([createdAt])
}

enum Theme {
  LIGHT
  DARK
  AUTO
}

// ===========================
// API Key Management
// ===========================

model ApiKey {
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  name String
  apiKey String @map("api_key")
  provider Provider @default(GOOGLE)
  isActive Boolean @default(true) @map("is_active")
  
  // Usage tracking
  usageLimit Int @default(1000) @map("usage_limit")
  usageCount Int @default(0) @map("usage_count")
  
  // Settings
  allowedModels Json? @map("allowed_models")
  rateLimitPerMinute Int @default(60) @map("rate_limit_per_minute")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  lastUsedAt DateTime? @map("last_used_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  usageStats UsageStats[]
  
  @@map("api_keys")
  @@index([userId])
  @@index([provider])
}

enum Provider {
  GOOGLE
  OPENAI
  ANTHROPIC
}

// ===========================
// Conversation Management
// ===========================

model Conversation {
  id Int @id @default(autoincrement())
  uuid String @unique @default(uuid())
  userId Int @map("user_id")
  title String
  description String? @db.Text
  
  // Model settings
  modelName String @default("gemini-pro") @map("model_name")
  systemPrompt String? @db.Text @map("system_prompt")
  temperature Decimal @default(0.70) @db.Decimal(3, 2)
  maxTokens Int @default(1000) @map("max_tokens")
  topP Decimal @default(0.90) @db.Decimal(3, 2) @map("top_p")
  topK Int @default(40) @map("top_k")
  
  // Metadata
  messageCount Int @default(0) @map("message_count")
  totalTokens Int @default(0) @map("total_tokens")
  totalCost Decimal @default(0.0000) @db.Decimal(10, 4) @map("total_cost")
  
  // Status
  isArchived Boolean @default(false) @map("is_archived")
  isFavorite Boolean @default(false) @map("is_favorite")
  isShared Boolean @default(false) @map("is_shared")
  shareToken String? @unique @map("share_token")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  lastMessageAt DateTime @default(now()) @map("last_message_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  tags Taggable[]
  
  @@map("conversations")
  @@index([userId])
  @@index([createdAt])
  @@index([lastMessageAt])
  @@index([modelName])
}

// ===========================
// Message Management
// ===========================

model Message {
  id Int @id @default(autoincrement())
  uuid String @unique @default(uuid())
  conversationId Int @map("conversation_id")
  userId Int @map("user_id")
  
  // Content
  role MessageRole
  content String @db.Text
  contentType ContentType @default(TEXT) @map("content_type")
  
  // Attachments
  attachments Json?
  
  // Statistics
  tokenCount Int @default(0) @map("token_count")
  cost Decimal @default(0.0000) @db.Decimal(8, 4)
  responseTimeMs Int @default(0) @map("response_time_ms")
  
  // Metadata
  modelUsed String? @map("model_used")
  apiKeyUsed Int? @map("api_key_used")
  requestId String? @map("request_id")
  
  // Status
  isEdited Boolean @default(false) @map("is_edited")
  isDeleted Boolean @default(false) @map("is_deleted")
  parentMessageId Int? @map("parent_message_id")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, map: "messages_conversation_id_fkey")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, map: "messages_user_id_fkey")
  apiKey ApiKey? @relation(fields: [apiKeyUsed], references: [id], onDelete: SetNull, map: "messages_api_key_id_fkey")
  parentMessage Message? @relation("MessageReplies", fields: [parentMessageId], references: [id], onDelete: SetNull)
  replies Message[] @relation("MessageReplies")
  tags Taggable[]
  
  @@map("messages")
  @@index([conversationId])
  @@index([role])
  @@index([createdAt])
  @@index([contentType])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ContentType {
  TEXT
  IMAGE
  AUDIO
  FILE
}

// ===========================
// File Management
// ===========================

model File {
  id Int @id @default(autoincrement())
  uuid String @unique @default(uuid())
  userId Int @map("user_id")
  
  // File info
  originalName String @map("original_name")
  fileName String @map("file_name")
  filePath String @map("file_path")
  fileSize BigInt @map("file_size")
  mimeType String @map("mime_type")
  
  // File type
  fileType FileType @map("file_type")
  
  // Metadata
  width Int?
  height Int?
  duration Int?
  
  // Processing status
  isProcessed Boolean @default(false) @map("is_processed")
  processingStatus ProcessingStatus @default(PENDING) @map("processing_status")
  processedData Json? @map("processed_data")
  
  // Analysis results
  extractedText String? @db.Text @map("extracted_text")
  analysisResult Json? @map("analysis_result")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags Taggable[]
  
  @@map("files")
  @@index([userId])
  @@index([fileType])
  @@index([mimeType])
  @@index([createdAt])
}

enum FileType {
  IMAGE
  AUDIO
  VIDEO
  DOCUMENT
  OTHER
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// ===========================
// Tagging System
// ===========================

model Tag {
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  name String
  color String // HEX color
  icon String @default("tag")
  description String? @db.Text
  
  // Usage statistics
  usageCount Int @default(0) @map("usage_count")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  taggables Taggable[]
  
  @@map("tags")
  @@unique([userId, name])
  @@index([userId])
  @@index([name])
}

model Taggable {
  id Int @id @default(autoincrement())
  tagId Int @map("tag_id")
  taggableType TaggableType @map("taggable_type")
  taggableId Int @map("taggable_id")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade, map: "taggables_tag_id_fkey")
  conversation Conversation? @relation(fields: [taggableId], references: [id], onDelete: Cascade, map: "taggables_conversation_id_fkey")
  message Message? @relation(fields: [taggableId], references: [id], onDelete: Cascade, map: "taggables_message_id_fkey")
  file File? @relation(fields: [taggableId], references: [id], onDelete: Cascade, map: "taggables_file_id_fkey")
  
  @@map("taggables")
  @@unique([tagId, taggableType, taggableId])
  @@index([tagId])
  @@index([taggableType, taggableId])
}

enum TaggableType {
  CONVERSATION
  MESSAGE
  FILE
}

// ===========================
// Usage Statistics
// ===========================

model UsageStats {
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  apiKeyId Int? @map("api_key_id")
  
  // Operation details
  operationType OperationType @map("operation_type")
  modelUsed String @map("model_used")
  
  // Statistics
  tokensInput Int @default(0) @map("tokens_input")
  tokensOutput Int @default(0) @map("tokens_output")
  cost Decimal @default(0.0000) @db.Decimal(8, 4)
  responseTimeMs Int @default(0) @map("response_time_ms")
  
  // Status
  status RequestStatus @default(SUCCESS)
  errorMessage String? @db.Text @map("error_message")
  
  // Time tracking
  date DateTime @db.Date
  hour Int @db.TinyInt
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiKey ApiKey? @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)
  
  @@map("usage_stats")
  @@index([userId])
  @@index([date])
  @@index([operationType])
  @@index([modelUsed])
  @@index([createdAt])
}

enum OperationType {
  CHAT
  TEXT_GENERATION
  IMAGE_ANALYSIS
  AUDIO_PROCESSING
  OCR
}

enum RequestStatus {
  SUCCESS
  ERROR
  TIMEOUT
}

// ===========================
// Settings Management
// ===========================

model Setting {
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  category String
  keyName String @map("key_name")
  value String @db.Text
  dataType DataType @default(STRING) @map("data_type")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("settings")
  @@unique([userId, category, keyName])
  @@index([userId])
  @@index([category])
}

enum DataType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

// ===========================
// Templates
// ===========================

model Template {
  id Int @id @default(autoincrement())
  userId Int? @map("user_id")
  name String
  description String? @db.Text
  category String
  
  // Template content
  promptTemplate String @db.Text @map("prompt_template")
  variables Json? // Replaceable variables
  
  // Settings
  modelSettings Json? @map("model_settings")
  
  // Status
  isPublic Boolean @default(false) @map("is_public")
  isFeatured Boolean @default(false) @map("is_featured")
  usageCount Int @default(0) @map("usage_count")
  rating Decimal @default(0.00) @db.Decimal(3, 2)
  ratingCount Int @default(0) @map("rating_count")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("templates")
  @@index([userId])
  @@index([category])
  @@index([isPublic])
  @@index([usageCount])
}

// ===========================
// Session Management
// ===========================

model Session {
  id String @id
  userId Int @map("user_id")
  expiresAt DateTime @map("expires_at")
  data Json?
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
  @@index([userId])
  @@index([expiresAt])
}

// ===========================
// Activity Logging
// ===========================

model ActivityLog {
  id Int @id @default(autoincrement())
  userId Int? @map("user_id")
  action String
  entityType String? @map("entity_type")
  entityId Int? @map("entity_id")
  details Json?
  ipAddress String? @map("ip_address")
  userAgent String? @db.Text @map("user_agent")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("activity_logs")
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([entityType, entityId])
}